#!/usr/bin/env python3
# Obfuscated with custom obfuscator
import base64
exec(base64.b64decode('#!/usr/bin/env python3
"""
XSS Payload Tester - Test individual payloads against a target
"""

import requests
import argparse
import json
import sys
from colorama import Fore, Style, init
from urllib.parse import urlencode, urlparse, parse_qs

init(autoreset=True)

class PayloadTester:
    def __init__(self, target_url, user_agent=None):
        self.target_url = target_url
        self.session = requests.Session()
        
        if user_agent:
            self.session.headers.update({'User-Agent': user_agent})
        else:
            self.session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            })

    def load_payloads(self, payload_file='xss_payloads.json'):
        """Load payloads from JSON file"""
        try:
            with open(payload_file, 'r') as f:
                payload_data = json.load(f)
            
            all_payloads = []
            for category, payloads in payload_data.items():
                for payload in payloads:
                    all_payloads.append((category, payload))
            
            return all_payloads
        except FileNotFoundError:
            print(f"{Fore.RED}Error: Payload file {payload_file} not found!")
            return []
        except json.JSONDecodeError:
            print(f"{Fore.RED}Error: Invalid JSON in {payload_file}!")
            return []

    def test_single_payload(self, payload, parameter=None, method='GET', form_data=None):
        """Test a single payload"""
        try:
            if method.upper() == 'GET' and parameter:
                # Test in URL parameter
                parsed_url = urlparse(self.target_url)
                params = parse_qs(parsed_url.query)
                params[parameter] = [payload]
                
                test_url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}?{urlencode(params, doseq=True)}"
                response = self.session.get(test_url, timeout=10)
                
            elif method.upper() == 'POST' and form_data:
                # Test in POST data
                if parameter:
                    form_data[parameter] = payload
                response = self.session.post(self.target_url, data=form_data, timeout=10)
                
            else:
                # Simple GET request with payload appended
                response = self.session.get(f"{self.target_url}{payload}", timeout=10)
            
            return response.text, response.status_code, response.url
            
        except Exception as e:
            print(f"{Fore.RED}Error testing payload: {str(e)}")
            return "", 0, ""

    def analyze_response(self, response_text, payload, test_url):
        """Analyze response for XSS indicators"""
        # Check for direct reflection
        if payload in response_text:
            return True, "Direct reflection found"
        
        # Check for partial reflection (payload might be modified by filters)
        payload_parts = [
            'alert', 'script', 'onerror', 'onload', 'javascript:', 
            'document.', 'window.', 'eval(', 'setTimeout'
        ]
        
        found_parts = []
        for part in payload_parts:
            if part.lower() in response_text.lower():
                found_parts.append(part)
        
        if found_parts:
            return True, f"Partial reflection found: {', '.join(found_parts)}"
        
        return False, "No reflection detected"

    def interactive_test(self):
        """Interactive payload testing"""
        print(f"{Fore.CYAN}Interactive XSS Payload Tester")
        print(f"{Fore.CYAN}Target: {self.target_url}")
        print(f"{Fore.YELLOW}Type 'help' for commands\n")
        
        payloads = self.load_payloads()
        if not payloads:
            print(f"{Fore.RED}No payloads loaded!")
            return
        
        while True:
            try:
                command = input(f"{Fore.GREEN}> ").strip()
                
                if command.lower() == 'quit' or command.lower() == 'exit':
                    break
                elif command.lower() == 'help':
                    self.show_help()
                elif command.lower() == 'list':
                    self.list_payloads(payloads)
                elif command.startswith('test '):
                    self.handle_test_command(command, payloads)
                elif command.startswith('custom '):
                    self.test_custom_payload(command)
                else:
                    print(f"{Fore.YELLOW}Unknown command. Type 'help' for available commands.")
                    
            except KeyboardInterrupt:
                print(f"\n{Fore.YELLOW}Exiting...")
                break

    def show_help(self):
        """Show help commands"""
        help_text = f"""
{Fore.CYAN}Available Commands:
{Fore.WHITE}  help              - Show this help
  list              - List all available payloads
  test <number>     - Test payload by number
  test <category>   - Test all payloads in category
  custom <payload>  - Test custom payload
  quit/exit         - Exit the program
        """
        print(help_text)

    def list_payloads(self, payloads):
        """List all available payloads"""
        current_category = None
        for i, (category, payload) in enumerate(payloads):
            if category != current_category:
                print(f"\n{Fore.CYAN}[{category.upper()}]")
                current_category = category
            print(f"{Fore.WHITE}{i+1:3d}. {payload[:80]}{'...' if len(payload) > 80 else ''}")

    def handle_test_command(self, command, payloads):
        """Handle test command"""
        parts = command.split(' ', 1)
        if len(parts) < 2:
            print(f"{Fore.YELLOW}Usage: test <number> or test <category>")
            return
        
        target = parts[1]
        
        # Test by number
        try:
            payload_num = int(target) - 1
            if 0 <= payload_num < len(payloads):
                category, payload = payloads[payload_num]
                self.test_and_display(payload, category, payload_num + 1)
            else:
                print(f"{Fore.RED}Invalid payload number. Use 'list' to see available payloads.")
        except ValueError:
            # Test by category
            category_payloads = [p for p in payloads if p[0] == target]
            if category_payloads:
                print(f"{Fore.CYAN}Testing {len(category_payloads)} payloads from category: {target}")
                for i, (cat, payload) in enumerate(category_payloads):
                    print(f"{Fore.YELLOW}Testing {i+1}/{len(category_payloads)}...")
                    self.test_and_display(payload, cat, f"{target}[{i+1}]")
            else:
                print(f"{Fore.RED}Category '{target}' not found.")

    def test_custom_payload(self, command):
        """Test custom payload"""
        parts = command.split(' ', 1)
        if len(parts) < 2:
            print(f"{Fore.YELLOW}Usage: custom <payload>")
            return
        
        payload = parts[1]
        self.test_and_display(payload, "custom", "CUSTOM")

    def test_and_display(self, payload, category, identifier):
        """Test payload and display results"""
        print(f"\n{Fore.CYAN}Testing Payload {identifier} ({category}):")
        print(f"{Fore.WHITE}Payload: {payload}")
        
        response_text, status_code, test_url = self.test_single_payload(payload)
        
        if status_code == 200:
            is_vulnerable, details = self.analyze_response(response_text, payload, test_url)
            
            if is_vulnerable:
                print(f"{Fore.RED}🚨 POTENTIAL VULNERABILITY DETECTED!")
                print(f"{Fore.RED}Details: {details}")
                print(f"{Fore.WHITE}URL: {test_url}")
            else:
                print(f"{Fore.GREEN}✓ No vulnerability detected")
                print(f"{Fore.WHITE}Details: {details}")
        else:
            print(f"{Fore.YELLOW}⚠ HTTP {status_code} - Unable to test properly")

def main():
    parser = argparse.ArgumentParser(description='XSS Payload Tester')
    parser.add_argument('-u', '--url', required=True, help='Target URL to test')
    parser.add_argument('--user-agent', help='Custom User-Agent string')
    parser.add_argument('-p', '--payload', help='Single payload to test')
    parser.add_argument('--payloads-file', default='xss_payloads.json', help='Payload file (default: xss_payloads.json)')
    
    args = parser.parse_args()
    
    tester = PayloadTester(args.url, args.user_agent)
    
    if args.payload:
        # Test single payload
        tester.test_and_display(args.payload, "manual", "MANUAL")
    else:
        # Interactive mode
        tester.interactive_test()

if __name__ == "__main__":
    main()
').decode('utf-8'))
