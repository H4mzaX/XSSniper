#!/usr/bin/env python3
# Obfuscated with custom obfuscator
import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoiIiIKUGFyYW1ldGVyIERpc2NvdmVyeSBUb29sIC0gRmluZCBwb3RlbnRpYWwgcGFyYW1ldGVycyBmb3IgWFNTIHRlc3RpbmcKIiIiCgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCB0aW1lCmZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCB1cmxwYXJzZSwgdXJsam9pbgpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cAppbXBvcnQgcmUKCmluaXQoYXV0b3Jlc2V0PVRydWUpCgpjbGFzcyBQYXJhbURpc2NvdmVyeToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB0YXJnZXRfdXJsLCB1c2VyX2FnZW50PU5vbmUsIHRpbWVvdXQ9MTApOgogICAgICAgIHNlbGYudGFyZ2V0X3VybCA9IHRhcmdldF91cmwKICAgICAgICBzZWxmLnRpbWVvdXQgPSB0aW1lb3V0CiAgICAgICAgc2VsZi5zZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgICAgICAgc2VsZi5kaXNjb3ZlcmVkX3BhcmFtcyA9IHNldCgpCiAgICAgICAgCiAgICAgICAgaWYgdXNlcl9hZ2VudDoKICAgICAgICAgICAgc2VsZi5zZXNzaW9uLmhlYWRlcnMudXBkYXRlKHsnVXNlci1BZ2VudCc6IHVzZXJfYWdlbnR9KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuc2Vzc2lvbi5oZWFkZXJzLnVwZGF0ZSh7CiAgICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYnCiAgICAgICAgICAgIH0pCgogICAgZGVmIGxvZyhzZWxmLCBtZXNzYWdlLCBsZXZlbD0iSU5GTyIpOgogICAgICAgICIiIkxvZ2dpbmcgZnVuY3Rpb24iIiIKICAgICAgICB0aW1lc3RhbXAgPSB0aW1lLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgICAgaWYgbGV2ZWwgPT0gIklORk8iOgogICAgICAgICAgICBjb2xvciA9IEZvcmUuQ1lBTgogICAgICAgIGVsaWYgbGV2ZWwgPT0gIlNVQ0NFU1MiOgogICAgICAgICAgICBjb2xvciA9IEZvcmUuR1JFRU4KICAgICAgICBlbGlmIGxldmVsID09ICJXQVJOSU5HIjoKICAgICAgICAgICAgY29sb3IgPSBGb3JlLllFTExPVwogICAgICAgIGVsaWYgbGV2ZWwgPT0gIkVSUk9SIjoKICAgICAgICAgICAgY29sb3IgPSBGb3JlLlJFRAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNvbG9yID0gRm9yZS5XSElURQogICAgICAgICAgICAKICAgICAgICBwcmludChmIntjb2xvcn1be3RpbWVzdGFtcH1dIFt7bGV2ZWx9XSB7bWVzc2FnZX0iKQoKICAgIGRlZiB0ZXN0X2NvbW1vbl9wYXJhbWV0ZXJzKHNlbGYpOgogICAgICAgICIiIlRlc3QgY29tbW9uIHBhcmFtZXRlciBuYW1lcyIiIgogICAgICAgIHNlbGYubG9nKCJUZXN0aW5nIGNvbW1vbiBwYXJhbWV0ZXIgbmFtZXMuLi4iLCAiSU5GTyIpCiAgICAgICAgCiAgICAgICAgY29tbW9uX3BhcmFtcyA9IFsKICAgICAgICAgICAgIyBTZWFyY2ggYW5kIHF1ZXJ5IHBhcmFtZXRlcnMKICAgICAgICAgICAgJ3EnLCAncXVlcnknLCAnc2VhcmNoJywgJ2tleXdvcmQnLCAndGVybScsICdmaW5kJywgJ2xvb2t1cCcsCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE5hdmlnYXRpb24gcGFyYW1ldGVycwogICAgICAgICAgICAnaWQnLCAncGFnZScsICd2aWV3JywgJ2FjdGlvbicsICdjbWQnLCAnZnVuY3Rpb24nLCAnbWV0aG9kJywKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ29udGVudCBwYXJhbWV0ZXJzCiAgICAgICAgICAgICduYW1lJywgJ3RpdGxlJywgJ2NvbnRlbnQnLCAnZGF0YScsICd0ZXh0JywgJ21lc3NhZ2UnLCAnY29tbWVudCcsCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFVzZXIgcGFyYW1ldGVycwogICAgICAgICAgICAndXNlcicsICd1c2VybmFtZScsICdlbWFpbCcsICdsb2dpbicsICdhY2NvdW50JywgJ3Byb2ZpbGUnLAogICAgICAgICAgICAKICAgICAgICAgICAgIyBGaWxlIHBhcmFtZXRlcnMKICAgICAgICAgICAgJ2ZpbGUnLCAnZmlsZW5hbWUnLCAncGF0aCcsICdkaXInLCAnZm9sZGVyJywgJ2RvY3VtZW50JywKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ2F0ZWdvcnkgcGFyYW1ldGVycwogICAgICAgICAgICAnY2F0JywgJ2NhdGVnb3J5JywgJ3R5cGUnLCAnY2xhc3MnLCAnZ3JvdXAnLCAnc2VjdGlvbicsCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE5hdmlnYXRpb24gcGFyYW1ldGVycwogICAgICAgICAgICAnbmV4dCcsICdwcmV2JywgJ2dvdG8nLCAncmVkaXJlY3QnLCAncmV0dXJuJywgJ2JhY2snLCAnZm9yd2FyZCcsCiAgICAgICAgICAgIAogICAgICAgICAgICAjIERpc3BsYXkgcGFyYW1ldGVycwogICAgICAgICAgICAnc2hvdycsICdkaXNwbGF5JywgJ2Zvcm1hdCcsICdsYXlvdXQnLCAndGhlbWUnLCAnc3R5bGUnLAogICAgICAgICAgICAKICAgICAgICAgICAgIyBGaWx0ZXIgcGFyYW1ldGVycwogICAgICAgICAgICAnZmlsdGVyJywgJ3NvcnQnLCAnb3JkZXInLCAnb3JkZXJieScsICdzb3J0YnknLCAnZGlyZWN0aW9uJywKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUGFnaW5hdGlvbiBwYXJhbWV0ZXJzCiAgICAgICAgICAgICdsaW1pdCcsICdvZmZzZXQnLCAnc3RhcnQnLCAnY291bnQnLCAncGVyX3BhZ2UnLCAncGFnZV9zaXplJywKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQVBJIHBhcmFtZXRlcnMKICAgICAgICAgICAgJ2NhbGxiYWNrJywgJ2pzb25wJywgJ2Zvcm1hdCcsICdvdXRwdXQnLCAncmVzcG9uc2VfdHlwZScsCiAgICAgICAgICAgIAogICAgICAgICAgICAjIERlYnVnIHBhcmFtZXRlcnMKICAgICAgICAgICAgJ2RlYnVnJywgJ3Rlc3QnLCAndHJhY2UnLCAndmVyYm9zZScsICdsb2cnLCAnZXJyb3InLAogICAgICAgICAgICAKICAgICAgICAgICAgIyBJbnB1dCBwYXJhbWV0ZXJzCiAgICAgICAgICAgICdpbnB1dCcsICd2YWx1ZScsICd2YWwnLCAncGFyYW0nLCAnYXJnJywgJ3ZhcmlhYmxlJwogICAgICAgIF0KICAgICAgICAKICAgICAgICBiYXNlX3VybCA9IHNlbGYudGFyZ2V0X3VybC5yc3RyaXAoJy8nKQogICAgICAgIAogICAgICAgIGZvciBwYXJhbSBpbiBjb21tb25fcGFyYW1zOgogICAgICAgICAgICB0ZXN0X3VybCA9IGYie2Jhc2VfdXJsfT97cGFyYW19PXRlc3QxMjMiCiAgICAgICAgICAgIAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuc2Vzc2lvbi5nZXQodGVzdF91cmwsIHRpbWVvdXQ9c2VsZi50aW1lb3V0KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIENoZWNrIGlmIHBhcmFtZXRlciBpcyBwcm9jZXNzZWQKICAgICAgICAgICAgICAgIGlmIHNlbGYuaXNfcGFyYW1ldGVyX3Byb2Nlc3NlZChyZXNwb25zZSwgcGFyYW0sICJ0ZXN0MTIzIik6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXNjb3ZlcmVkX3BhcmFtcy5hZGQocGFyYW0pCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2coZiJGb3VuZCBwYXJhbWV0ZXI6IHtwYXJhbX0iLCAiU1VDQ0VTUyIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHNlbGYubG9nKGYiRXJyb3IgdGVzdGluZyB7cGFyYW19OiB7c3RyKGUpfSIsICJFUlJPUiIpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4xKSAgIyBTbWFsbCBkZWxheSB0byBhdm9pZCBvdmVyd2hlbG1pbmcgdGhlIHNlcnZlcgoKICAgIGRlZiBpc19wYXJhbWV0ZXJfcHJvY2Vzc2VkKHNlbGYsIHJlc3BvbnNlLCBwYXJhbV9uYW1lLCB0ZXN0X3ZhbHVlKToKICAgICAgICAiIiJDaGVjayBpZiBhIHBhcmFtZXRlciBhcHBlYXJzIHRvIGJlIHByb2Nlc3NlZCBieSB0aGUgYXBwbGljYXRpb24iIiIKICAgICAgICBjb250ZW50ID0gcmVzcG9uc2UudGV4dC5sb3dlcigpCiAgICAgICAgcGFyYW1fbmFtZV9sb3dlciA9IHBhcmFtX25hbWUubG93ZXIoKQogICAgICAgIHRlc3RfdmFsdWVfbG93ZXIgPSB0ZXN0X3ZhbHVlLmxvd2VyKCkKICAgICAgICAKICAgICAgICAjIENoZWNrIHZhcmlvdXMgaW5kaWNhdG9ycwogICAgICAgIGluZGljYXRvcnMgPSBbCiAgICAgICAgICAgIHRlc3RfdmFsdWVfbG93ZXIgaW4gY29udGVudCwKICAgICAgICAgICAgcGFyYW1fbmFtZV9sb3dlciBpbiBjb250ZW50LAogICAgICAgICAgICBmIm5hbWU9XCJ7cGFyYW1fbmFtZV9sb3dlcn1cIiIgaW4gY29udGVudCwKICAgICAgICAgICAgZiJpZD1cIntwYXJhbV9uYW1lX2xvd2VyfVwiIiBpbiBjb250ZW50LAogICAgICAgICAgICAiZXJyb3IiIGluIGNvbnRlbnQgYW5kIHBhcmFtX25hbWVfbG93ZXIgaW4gY29udGVudCwKICAgICAgICAgICAgImludmFsaWQiIGluIGNvbnRlbnQgYW5kIHBhcmFtX25hbWVfbG93ZXIgaW4gY29udGVudCwKICAgICAgICAgICAgIm1pc3NpbmciIGluIGNvbnRlbnQgYW5kIHBhcmFtX25hbWVfbG93ZXIgaW4gY29udGVudAogICAgICAgIF0KICAgICAgICAKICAgICAgICByZXR1cm4gYW55KGluZGljYXRvcnMpCgogICAgZGVmIGRpc2NvdmVyX2Zyb21fZm9ybXMoc2VsZik6CiAgICAgICAgIiIiRGlzY292ZXIgcGFyYW1ldGVycyBmcm9tIEhUTUwgZm9ybXMiIiIKICAgICAgICBzZWxmLmxvZygiQW5hbHl6aW5nIEhUTUwgZm9ybXMgZm9yIHBhcmFtZXRlcnMuLi4iLCAiSU5GTyIpCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuc2Vzc2lvbi5nZXQoc2VsZi50YXJnZXRfdXJsLCB0aW1lb3V0PXNlbGYudGltZW91dCkKICAgICAgICAgICAgc291cCA9IEJlYXV0aWZ1bFNvdXAocmVzcG9uc2UuY29udGVudCwgJ2h0bWwucGFyc2VyJykKICAgICAgICAgICAgCiAgICAgICAgICAgIGZvcm1zID0gc291cC5maW5kX2FsbCgnZm9ybScpCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgZm9ybSBpbiBmb3JtczoKICAgICAgICAgICAgICAgICMgR2V0IGZvcm0gaW5wdXRzCiAgICAgICAgICAgICAgICBpbnB1dHMgPSBmb3JtLmZpbmRfYWxsKFsnaW5wdXQnLCAndGV4dGFyZWEnLCAnc2VsZWN0J10pCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZvciBpbnB1dF90YWcgaW4gaW5wdXRzOgogICAgICAgICAgICAgICAgICAgIG5hbWUgPSBpbnB1dF90YWcuZ2V0KCduYW1lJykKICAgICAgICAgICAgICAgICAgICBpZiBuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRpc2NvdmVyZWRfcGFyYW1zLmFkZChuYW1lKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZyhmIkZvdW5kIGZvcm0gcGFyYW1ldGVyOiB7bmFtZX0iLCAiU1VDQ0VTUyIpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2coZiJFcnJvciBhbmFseXppbmcgZm9ybXM6IHtzdHIoZSl9IiwgIkVSUk9SIikKCiAgICBkZWYgZGlzY292ZXJfZnJvbV9qYXZhc2NyaXB0KHNlbGYpOgogICAgICAgICIiIkRpc2NvdmVyIHBhcmFtZXRlcnMgZnJvbSBKYXZhU2NyaXB0IGNvZGUiIiIKICAgICAgICBzZWxmLmxvZygiQW5hbHl6aW5nIEphdmFTY3JpcHQgZm9yIHBhcmFtZXRlcnMuLi4iLCAiSU5GTyIpCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuc2Vzc2lvbi5nZXQoc2VsZi50YXJnZXRfdXJsLCB0aW1lb3V0PXNlbGYudGltZW91dCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTG9vayBmb3IgY29tbW9uIEphdmFTY3JpcHQgcGFyYW1ldGVyIHBhdHRlcm5zCiAgICAgICAgICAgIGpzX3BhdHRlcm5zID0gWwogICAgICAgICAgICAgICAgcidnZXRQYXJhbWV0ZXJcKFsiXCddKFx3KylbIlwnXScsCiAgICAgICAgICAgICAgICByJ1VSTFNlYXJjaFBhcmFtcy4qZ2V0XChbIlwnXShcdyspWyJcJ10nLAogICAgICAgICAgICAgICAgcidsb2NhdGlvblwuc2VhcmNoLipbIlwnXShcdyspWyJcJ10nLAogICAgICAgICAgICAgICAgcid3aW5kb3dcLmxvY2F0aW9uLipbP1wmXShcdyspPScsCiAgICAgICAgICAgICAgICByJ2RvY3VtZW50XC5nZXRFbGVtZW50QnlJZFwoWyJcJ10oXHcrKVsiXCddJywKICAgICAgICAgICAgICAgIHInZG9jdW1lbnRcLmdldEVsZW1lbnRzQnlOYW1lXChbIlwnXShcdyspWyJcJ10nLAogICAgICAgICAgICAgICAgcid2YXJccysoXHcrKVxzKj0uKmdldFBhcmFtZXRlcicsCiAgICAgICAgICAgICAgICByJ1s/XCZdKFx3Kyk9LipcKycsCiAgICAgICAgICAgIF0KICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciBwYXR0ZXJuIGluIGpzX3BhdHRlcm5zOgogICAgICAgICAgICAgICAgbWF0Y2hlcyA9IHJlLmZpbmRhbGwocGF0dGVybiwgcmVzcG9uc2UudGV4dCwgcmUuSUdOT1JFQ0FTRSkKICAgICAgICAgICAgICAgIGZvciBtYXRjaCBpbiBtYXRjaGVzOgogICAgICAgICAgICAgICAgICAgIGlmIGxlbihtYXRjaCkgPiAxIGFuZCBtYXRjaC5pc2FscGhhKCk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzY292ZXJlZF9wYXJhbXMuYWRkKG1hdGNoKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZyhmIkZvdW5kIEpTIHBhcmFtZXRlcjoge21hdGNofSIsICJTVUNDRVNTIikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZyhmIkVycm9yIGFuYWx5emluZyBKYXZhU2NyaXB0OiB7c3RyKGUpfSIsICJFUlJPUiIpCgogICAgZGVmIGRpc2NvdmVyX2Zyb21fbGlua3Moc2VsZik6CiAgICAgICAgIiIiRGlzY292ZXIgcGFyYW1ldGVycyBmcm9tIGxpbmtzIG9uIHRoZSBwYWdlIiIiCiAgICAgICAgc2VsZi5sb2coIkFuYWx5emluZyBsaW5rcyBmb3IgcGFyYW1ldGVycy4uLiIsICJJTkZPIikKICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5zZXNzaW9uLmdldChzZWxmLnRhcmdldF91cmwsIHRpbWVvdXQ9c2VsZi50aW1lb3V0KQogICAgICAgICAgICBzb3VwID0gQmVhdXRpZnVsU291cChyZXNwb25zZS5jb250ZW50LCAnaHRtbC5wYXJzZXInKQogICAgICAgICAgICAKICAgICAgICAgICAgbGlua3MgPSBzb3VwLmZpbmRfYWxsKCdhJywgaHJlZj1UcnVlKQogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIGxpbmsgaW4gbGlua3M6CiAgICAgICAgICAgICAgICBocmVmID0gbGlua1snaHJlZiddCiAgICAgICAgICAgICAgICBpZiAnPycgaW4gaHJlZjoKICAgICAgICAgICAgICAgICAgICAjIEV4dHJhY3QgcGFyYW1ldGVycyBmcm9tIFVSTAogICAgICAgICAgICAgICAgICAgIHBhcmFtc19wYXJ0ID0gaHJlZi5zcGxpdCgnPycpWzFdCiAgICAgICAgICAgICAgICAgICAgaWYgJyYnIGluIHBhcmFtc19wYXJ0OgogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbV9wYWlycyA9IHBhcmFtc19wYXJ0LnNwbGl0KCcmJykKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbV9wYWlycyA9IFtwYXJhbXNfcGFydF0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgcGFpciBpbiBwYXJhbV9wYWlyczoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJz0nIGluIHBhaXI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbV9uYW1lID0gcGFpci5zcGxpdCgnPScpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbV9uYW1lIGFuZCBwYXJhbV9uYW1lLmlzYWxwaGEoKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRpc2NvdmVyZWRfcGFyYW1zLmFkZChwYXJhbV9uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nKGYiRm91bmQgbGluayBwYXJhbWV0ZXI6IHtwYXJhbV9uYW1lfSIsICJTVUNDRVNTIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nKGYiRXJyb3IgYW5hbHl6aW5nIGxpbmtzOiB7c3RyKGUpfSIsICJFUlJPUiIpCgogICAgZGVmIHRlc3RfYmxpbmRfcGFyYW1ldGVycyhzZWxmKToKICAgICAgICAiIiJUZXN0IGZvciBibGluZCBwYXJhbWV0ZXJzIHVzaW5nIGVycm9yLWJhc2VkIGRldGVjdGlvbiIiIgogICAgICAgIHNlbGYubG9nKCJUZXN0aW5nIGZvciBibGluZCBwYXJhbWV0ZXJzLi4uIiwgIklORk8iKQogICAgICAgIAogICAgICAgICMgUGFyYW1ldGVycyB0aGF0IG1pZ2h0IGNhdXNlIGVycm9ycyBvciBkaWZmZXJlbnQgcmVzcG9uc2VzCiAgICAgICAgZXJyb3JfaW5kdWNpbmdfdmFsdWVzID0gWwogICAgICAgICAgICAiJyBPUiAnMSc9JzEiLAogICAgICAgICAgICAiPHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PiIsCiAgICAgICAgICAgICIuLi8uLi8uLi8uLi9ldGMvcGFzc3dkIiwKICAgICAgICAgICAgIiR7Nyo3fSIsCiAgICAgICAgICAgICJ7ezcqN319IiwKICAgICAgICAgICAgIjwlPTcqNyU+IiwKICAgICAgICAgICAgIi9ldGMvcGFzc3dkIiwKICAgICAgICAgICAgIi4uXFwuLlxcLi5cXHdpbmRvd3NcXHN5c3RlbTMyXFxkcml2ZXJzXFxldGNcXGhvc3RzIgogICAgICAgIF0KICAgICAgICAKICAgICAgICBiYXNlX3VybCA9IHNlbGYudGFyZ2V0X3VybC5yc3RyaXAoJy8nKQogICAgICAgIAogICAgICAgICMgR2V0IGJhc2VsaW5lIHJlc3BvbnNlCiAgICAgICAgdHJ5OgogICAgICAgICAgICBiYXNlbGluZV9yZXNwb25zZSA9IHNlbGYuc2Vzc2lvbi5nZXQoc2VsZi50YXJnZXRfdXJsLCB0aW1lb3V0PXNlbGYudGltZW91dCkKICAgICAgICAgICAgYmFzZWxpbmVfbGVuZ3RoID0gbGVuKGJhc2VsaW5lX3Jlc3BvbnNlLnRleHQpCiAgICAgICAgICAgIGJhc2VsaW5lX3N0YXR1cyA9IGJhc2VsaW5lX3Jlc3BvbnNlLnN0YXR1c19jb2RlCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBzZWxmLmxvZygiQ291bGQgbm90IGdldCBiYXNlbGluZSByZXNwb25zZSIsICJFUlJPUiIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIAogICAgICAgICMgVGVzdCBrbm93biBwYXJhbWV0ZXJzIHdpdGggZXJyb3ItaW5kdWNpbmcgdmFsdWVzCiAgICAgICAgZm9yIHBhcmFtIGluIGxpc3Qoc2VsZi5kaXNjb3ZlcmVkX3BhcmFtcyk6CiAgICAgICAgICAgIGZvciB2YWx1ZSBpbiBlcnJvcl9pbmR1Y2luZ192YWx1ZXNbOjNdOiAgIyBUZXN0IGZpcnN0IDMgdmFsdWVzCiAgICAgICAgICAgICAgICB0ZXN0X3VybCA9IGYie2Jhc2VfdXJsfT97cGFyYW19PXt2YWx1ZX0iCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB0ZXN0X3Jlc3BvbnNlID0gc2VsZi5zZXNzaW9uLmdldCh0ZXN0X3VybCwgdGltZW91dD1zZWxmLnRpbWVvdXQpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBmb3Igc2lnbmlmaWNhbnQgZGlmZmVyZW5jZXMKICAgICAgICAgICAgICAgICAgICBsZW5ndGhfZGlmZiA9IGFicyhsZW4odGVzdF9yZXNwb25zZS50ZXh0KSAtIGJhc2VsaW5lX2xlbmd0aCkKICAgICAgICAgICAgICAgICAgICBzdGF0dXNfZGlmZiA9IHRlc3RfcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gYmFzZWxpbmVfc3RhdHVzCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuZ3RoX2RpZmYgPiAxMDAgb3Igc3RhdHVzX2RpZmY6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nKGYiUGFyYW1ldGVyIHtwYXJhbX0gc2hvd3MgcmVzcG9uc2UgZGlmZmVyZW5jZXMiLCAiV0FSTklORyIpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgZGVmIHJ1bl9kaXNjb3Zlcnkoc2VsZik6CiAgICAgICAgIiIiUnVuIGFsbCBkaXNjb3ZlcnkgbWV0aG9kcyIiIgogICAgICAgIHNlbGYubG9nKGYiU3RhcnRpbmcgcGFyYW1ldGVyIGRpc2NvdmVyeSBmb3I6IHtzZWxmLnRhcmdldF91cmx9IiwgIklORk8iKQogICAgICAgIAogICAgICAgICMgUnVuIGRpc2NvdmVyeSBtZXRob2RzCiAgICAgICAgc2VsZi5kaXNjb3Zlcl9mcm9tX2Zvcm1zKCkKICAgICAgICBzZWxmLmRpc2NvdmVyX2Zyb21famF2YXNjcmlwdCgpCiAgICAgICAgc2VsZi5kaXNjb3Zlcl9mcm9tX2xpbmtzKCkKICAgICAgICBzZWxmLnRlc3RfY29tbW9uX3BhcmFtZXRlcnMoKQogICAgICAgIHNlbGYudGVzdF9ibGluZF9wYXJhbWV0ZXJzKCkKICAgICAgICAKICAgICAgICAjIEdlbmVyYXRlIHJlcG9ydAogICAgICAgIHNlbGYuZ2VuZXJhdGVfcmVwb3J0KCkKCiAgICBkZWYgZ2VuZXJhdGVfcmVwb3J0KHNlbGYpOgogICAgICAgICIiIkdlbmVyYXRlIGRpc2NvdmVyeSByZXBvcnQiIiIKICAgICAgICBwcmludChmIlxue0ZvcmUuQ1lBTn17Jz0nKjYwfSIpCiAgICAgICAgcHJpbnQoZiJ7Rm9yZS5DWUFOfVBBUkFNRVRFUiBESVNDT1ZFUlkgUkVQT1JUIikKICAgICAgICBwcmludChmIntGb3JlLkNZQU59eyc9Jyo2MH0iKQogICAgICAgIAogICAgICAgIGlmIG5vdCBzZWxmLmRpc2NvdmVyZWRfcGFyYW1zOgogICAgICAgICAgICBwcmludChmIntGb3JlLllFTExPV31ObyBwYXJhbWV0ZXJzIGRpc2NvdmVyZWQuIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludChmIntGb3JlLkdSRUVOfURpc2NvdmVyZWQge2xlbihzZWxmLmRpc2NvdmVyZWRfcGFyYW1zKX0gcG90ZW50aWFsIHBhcmFtZXRlcnM6IikKICAgICAgICAgICAgcHJpbnQoKQogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIGksIHBhcmFtIGluIGVudW1lcmF0ZShzb3J0ZWQoc2VsZi5kaXNjb3ZlcmVkX3BhcmFtcyksIDEpOgogICAgICAgICAgICAgICAgcHJpbnQoZiJ7Rm9yZS5XSElURX17aToyZH0uIHtwYXJhbX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBTYXZlIHRvIGZpbGUKICAgICAgICAgICAgd2l0aCBvcGVuKCdkaXNjb3ZlcmVkX3BhcmFtcy50eHQnLCAndycpIGFzIGY6CiAgICAgICAgICAgICAgICBmb3IgcGFyYW0gaW4gc29ydGVkKHNlbGYuZGlzY292ZXJlZF9wYXJhbXMpOgogICAgICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7cGFyYW19XG4iKQogICAgICAgICAgICAKICAgICAgICAgICAgcHJpbnQoZiJcbntGb3JlLkNZQU59UGFyYW1ldGVycyBzYXZlZCB0bzogZGlzY292ZXJlZF9wYXJhbXMudHh0IikKICAgICAgICAKICAgICAgICBwcmludChmIntGb3JlLkNZQU59eyc9Jyo2MH0iKQoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSdQYXJhbWV0ZXIgRGlzY292ZXJ5IFRvb2wnKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLXUnLCAnLS11cmwnLCByZXF1aXJlZD1UcnVlLCBoZWxwPSdUYXJnZXQgVVJMJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tdXNlci1hZ2VudCcsIGhlbHA9J0N1c3RvbSBVc2VyLUFnZW50IHN0cmluZycpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctLXRpbWVvdXQnLCB0eXBlPWludCwgZGVmYXVsdD0xMCwgaGVscD0nUmVxdWVzdCB0aW1lb3V0IChkZWZhdWx0OiAxMCknKQogICAgCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQogICAgCiAgICBkaXNjb3ZlcmVyID0gUGFyYW1EaXNjb3ZlcnkoYXJncy51cmwsIGFyZ3MudXNlcl9hZ2VudCwgYXJncy50aW1lb3V0KQogICAgZGlzY292ZXJlci5ydW5fZGlzY292ZXJ5KCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK').decode('utf-8'))
